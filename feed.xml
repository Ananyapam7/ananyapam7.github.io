<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ananyapam7.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ananyapam7.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-07-07T12:52:34+00:00</updated><id>https://ananyapam7.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Anectodes</title><link href="https://ananyapam7.github.io/blog/2024/linkedin/" rel="alternate" type="text/html" title="Anectodes"/><published>2024-07-05T10:09:00+00:00</published><updated>2024-07-05T10:09:00+00:00</updated><id>https://ananyapam7.github.io/blog/2024/linkedin</id><content type="html" xml:base="https://ananyapam7.github.io/blog/2024/linkedin/"><![CDATA[<p>Trying to keep track of some of my popular LinkedIn posts which might be of interest to some:</p> <ul> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_the-weinsteinaronszajn-identity-is-a-rather-activity-7214100542308945920-SDYv?utm_source=share&amp;utm_medium=member_desktop">The Weinstein–Aronszajn Identity</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_the-put-call-parity-is-a-fundamental-concept-activity-7210114274340270080-0ASg?utm_source=share&amp;utm_medium=member_desktop">Put-Call Parity</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_the-current-elections-remind-of-a-famous-activity-7204109761837965314-CyUP?utm_source=share&amp;utm_medium=member_desktop">Ballot Theorem</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_abosrbing-markov-chains-activity-7198880261508337664-iw6B?utm_source=share&amp;utm_medium=member_desktop">Absorbing Markov Chains</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_last-week-i-spent-some-time-learning-about-activity-7195618758655168513-xqDh?utm_source=share&amp;utm_medium=member_desktop">Rand function</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_we-often-take-for-granted-how-easily-we-can-activity-7190922830224486400-rRdG?utm_source=share&amp;utm_medium=member_desktop">Random Sampling</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_compendium-of-probability-distributions-activity-7189092005942018049-KGl1?utm_source=share&amp;utm_medium=member_desktop">Compendium of Probability Distributions</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_many-of-you-might-have-heard-of-the-terms-activity-7185124613956259840-ZL_k?utm_source=share&amp;utm_medium=member_desktop">Value at Risk and Expected Shortfall</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_negative-probability-activity-7181110942980521985-9SZR?utm_source=share&amp;utm_medium=member_desktop">Negative Probability</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_when-i-try-to-read-statistics-blogs-nowadays-activity-7178594108427354112-zIH_?utm_source=share&amp;utm_medium=member_desktop">DONT Read Statistics Blogs!</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_stochastic-integrals-can-often-look-confusing-activity-7176782154578739200-SJxy?utm_source=share&amp;utm_medium=member_desktop">Stochastic Integrals</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_a-rather-intuitive-but-less-known-theorem-activity-7173520675511500800-8qpT?utm_source=share&amp;utm_medium=member_desktop">Gershgorin Circle Theorem</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_when-i-was-your-age-i-was-able-to-visualize-activity-7170259159202906112-VelV?utm_source=share&amp;utm_medium=member_desktop">Visualizing High Dimensions</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_if-you-have-some-experience-with-numerical-activity-7168809661180035072-PsgN?utm_source=share&amp;utm_medium=member_desktop">Woodbury’s Identity</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_the-concept-of-information-was-quite-difficult-activity-7168447301265309697-qAS9?utm_source=share&amp;utm_medium=member_desktop">Understanding Information</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_the-idea-of-choosing-a-basis-and-decomposing-activity-7167048030167273473--MaT?utm_source=share&amp;utm_medium=member_desktop">Choosing a Basis for Random Variables</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_in-the-midst-of-world-war-ii-statisticians-activity-7164872239148875777-q9gw?utm_source=share&amp;utm_medium=member_desktop">German Tank Problem</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_if-youve-read-the-book-quantitative-trading-activity-7163747545305870336-1JBh?utm_source=share&amp;utm_medium=member_desktop">Kelly Criteria</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_consider-two-iid-gaussian-variates-x-and-activity-7163090797704212480-azWr?utm_source=share&amp;utm_medium=member_desktop">Rayleigh distribution</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_if-youre-a-statistician-internalize-concepts-activity-7162672616326074368-V2yC?utm_source=share&amp;utm_medium=member_desktop">Focus on concepts of distribution theory!</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_you-know-youre-in-for-a-wild-ride-when-you-activity-7162277785237942272-mITy?utm_source=share&amp;utm_medium=member_desktop">Wild Ride in Statistics</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_if-youve-been-quietly-observing-or-diligently-activity-7160517405318787072-bVqe?utm_source=share&amp;utm_medium=member_desktop">Sheldon Ross Book</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_i-recently-finished-reading-this-book-named-activity-7159757464656130048-LFLB?utm_source=share&amp;utm_medium=member_desktop">Coffee Can Investing</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_is-a-random-variable-really-random-nope-activity-7155119630808686592-W0fb?utm_source=share&amp;utm_medium=member_desktop">Are Random Variables really random?</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_does-probability-of-an-event-being-zero-imply-activity-7152517219220889600-knu2?utm_source=share&amp;utm_medium=member_desktop">Probability zero events</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_last-week-i-wrote-a-post-about-intuitively-activity-7145655290280009728-WTup?utm_source=share&amp;utm_medium=member_desktop">Fokker Plank II</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_recently-ive-come-across-a-lot-of-discussions-activity-7142430929830023170-Fre2?utm_source=share&amp;utm_medium=member_desktop">Fokker Plank I</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_while-visiting-the-library-at-iitb-today-activity-7143922343965351936-Zr1q?utm_source=share&amp;utm_medium=member_desktop">Library Visit at IITB</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_today-marks-the-birthday-of-norbert-wiener-activity-7134397863190482944-nDSQ?utm_source=share&amp;utm_medium=member_desktop">Wiener Process</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_lotus-or-the-law-of-the-unconscious-statistician-activity-7133833527585890305-QDFM?utm_source=share&amp;utm_medium=member_desktop">Law of the Unconscious Statistician</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_given-an-8-x-8-mutilated-board-with-the-corner-activity-7133298221946159104-uWOy?utm_source=share&amp;utm_medium=member_desktop">Mutilated Board Problem</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_an-interesting-mathematical-trivia-i-learnt-activity-7133057220547649536-PIcH?utm_source=share&amp;utm_medium=member_desktop">Kaprekar’s Constant</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_ever-wondered-how-a-computer-program-manages-activity-7113125553175461888-QQpb?utm_source=share&amp;utm_medium=member_desktop">Threading</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_streaming-into-statistics-reservoir-sampling-activity-7110859174917402626-m1H3?utm_source=share&amp;utm_medium=member_desktop">Reservoir Sampling</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_variational-inference-a-quick-dive-what-activity-7108669582067859456-s7HJ?utm_source=share&amp;utm_medium=member_desktop">Variational Inference</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_in-the-vast-ocean-of-literature-on-machine-activity-7107738464757960704-Fyha?utm_source=share&amp;utm_medium=member_desktop">Bishop Book</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_r-data-project-activity-7047072384742211584-PEvM?utm_source=share&amp;utm_medium=member_desktop">R Project Tips</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_statistics-geometry-activity-7043955745645563906-QVoB?utm_source=share&amp;utm_medium=member_desktop">Statistics and Geometry</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_training-deeplearning-pytorch-activity-7036246915096686592-NFGL?utm_source=share&amp;utm_medium=member_desktop">Deep Learning with PyTorch</a></p> </li> <li> <p><a href="https://www.linkedin.com/posts/ananyapam-de_yesterday-while-doing-leetcode-i-came-across-activity-6987953066457108480-NRaA?utm_source=share&amp;utm_medium=member_desktop">Coupon Collector’s problem in LeetCode!</a></p> </li> </ul>]]></content><author><name></name></author><category term="tech"/><category term="finance"/><category term="code"/><category term="math"/><category term="stats"/><summary type="html"><![CDATA[A compilation of resourceful posts that I've written]]></summary></entry><entry><title type="html">Researchers in my field</title><link href="https://ananyapam7.github.io/blog/2023/researchers/" rel="alternate" type="text/html" title="Researchers in my field"/><published>2023-11-09T15:09:00+00:00</published><updated>2023-11-09T15:09:00+00:00</updated><id>https://ananyapam7.github.io/blog/2023/researchers</id><content type="html" xml:base="https://ananyapam7.github.io/blog/2023/researchers/"><![CDATA[<ul> <li> <p><a href="https://scholar.google.com/citations?hl=en&amp;user=LnE-rqwAAAAJ">Willi Sauerbrei</a></p> </li> <li> <p><a href="https://scholar.google.com/citations?user=EskiIyEAAAAJ&amp;hl=en">Simon Wood</a></p> </li> <li> <p><a href="https://scholar.google.com/citations?hl=en&amp;user=atwrJlsAAAAJ">Thomas Kneib</a></p> </li> <li> <p><a href="https://scholar.google.com/citations?user=_DYguksAAAAJ">David Ruegamer</a></p> </li> <li> <p><a href="https://scholar.google.com/citations?user=pgMVlQUAAAAJ&amp;hl=en">Alexander Silbersdorff</a></p> </li> <li> <p><a href="https://scholar.google.com/citations?hl=en&amp;user=GrOIVw8AAAAJ">Anders Nielsen</a></p> </li> <li> <p><a href="https://scholar.google.com/citations?hl=en&amp;user=n9OHjHYAAAAJ">Mikis Stasinopoulos</a></p> </li> <li> <p><a href="https://scholar.google.com/citations?hl=en&amp;user=Vwas7kAAAAAJ">Bobak Shahriari</a></p> </li> <li> <p><a href="https://scholar.google.com/citations?hl=en&amp;user=Tuahd3EAAAAJ">Matthias Templ</a></p> </li> <li> <p><a href="https://scholar.google.com/citations?user=eoA_1iUAAAAJ">Natalya Pya Arnqvist</a></p> </li> <li> <p><a href="https://scholar.google.de/citations?user=upS2UTIAAAAJ&amp;hl=en">Nadja Klein</a></p> </li> <li> <p><a href="https://scholar.google.com/citations?user=gCoguiMAAAAJ&amp;hl=en">Nikolaus Umlauf</a></p> </li> <li> <p><a href="https://scholar.google.com/citations?user=NRNk844AAAAJ&amp;hl=en">Achim Zeileis</a></p> </li> </ul>]]></content><author><name></name></author><category term="tech"/><category term="finance"/><category term="code"/><summary type="html"><![CDATA[These are some researchers who's works I follow]]></summary></entry><entry><title type="html">Threading in C++</title><link href="https://ananyapam7.github.io/blog/2023/threading/" rel="alternate" type="text/html" title="Threading in C++"/><published>2023-07-15T15:09:00+00:00</published><updated>2023-07-15T15:09:00+00:00</updated><id>https://ananyapam7.github.io/blog/2023/threading</id><content type="html" xml:base="https://ananyapam7.github.io/blog/2023/threading/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>Threading is a concept in C++ 11 and we will cover the following:</p> <ul> <li>What is Threading? What are threads and ways to create them?</li> <li>join and detach</li> <li>Mutex, Race Conditiion and Critical Section</li> <li>Types of Mutex and locks</li> <li>Condition Variables</li> <li>Thread Synchronization</li> <li>Producer Consumer Problem</li> </ul> <p>Thread is a lighweight process. To use them, we need to include the <code class="language-plaintext highlighter-rouge">#include &lt;thread&gt;</code>. The <code class="language-plaintext highlighter-rouge">main()</code> is the only thread if we don’t have any other threads. Threads are created inside the <code class="language-plaintext highlighter-rouge">main()</code> function.</p> <p>Applications:</p> <ul> <li>MS word uses threads, one for formatting, one for spell check etc</li> <li>New tabs in browsers are opened in new threads</li> <li>VScode uses threading for autocomplete (intellisense)</li> </ul> <p>Here’s a basic C++ threading program:</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;thread&gt;</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">threadFunction</span><span class="p">(</span><span class="kt">int</span> <span class="n">threadNumber</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread "</span> <span class="o">&lt;&lt;</span> <span class="n">threadNumber</span> <span class="o">&lt;&lt;</span> <span class="s">" is running</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// thread requires a callable object</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t1</span><span class="p">(</span><span class="n">threadFunction</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t2</span><span class="p">(</span><span class="n">threadFunction</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>

    <span class="c1">// Joining the threads with the main thread</span>
    <span class="n">t1</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="n">t2</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Both threads have completed their execution</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Note that now t1 and t2 are two independent threads. But when we see <code class="language-plaintext highlighter-rouge">t1.join()</code>, it will <strong>wait</strong> for the execution of t1 to complete and join the thread t1 to the main. Next <code class="language-plaintext highlighter-rouge">t2.join()</code> will wait for t2 to complete and join the thread t2 to main. A big point to note here is that it is NOT TRUE that t1 will be created before t2. When creating mutliple threads together, it is not guranteed that they are created in order. This was an example of thread creation using function pointer. There are several other ways to create threads as well. A thread requires a callable object.</p> <h1 id="creating-threads-in-c-11">Creating Threads in C++ 11</h1> <ul> <li>Function Pointer</li> <li>Lambda Function</li> <li>Functor / Function Object: A function wrapped in a class so it can be used as an object. grater<int>()</int></li> <li>Non-Static Member Function</li> <li>Static Member Function</li> </ul> <p>Here’s an example of threading with a lambda function:</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="k">auto</span> <span class="n">fun</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
        <span class="k">while</span><span class="p">(</span><span class="n">x</span><span class="o">--</span> <span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">x</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">};</span>

    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="nf">t</span><span class="p">(</span><span class="n">fun</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
    <span class="n">t</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>which can also be done this way:</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t</span><span class="p">(</span>
    <span class="p">[](</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
        <span class="k">while</span><span class="p">(</span><span class="n">x</span><span class="o">--</span> <span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">x</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">},</span> <span class="mi">10</span><span class="p">);</span>
    <span class="n">t</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h1 id="join-detach-and-joinable-functions">join(), detach() and joinable() functions</h1> <p>Once a thread is created, we wait for it to complete execution by calling the <code class="language-plaintext highlighter-rouge">join()</code> function. Double join will result in program termination/ undefined behavior. Hence before joining, we should check if the thread is joinable using the joinable() method which returns true if the thread is joinable, false otherwise. Here is an example:</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;chrono&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;thread&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">run</span><span class="p">(</span><span class="kt">int</span> <span class="n">count</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">while</span><span class="p">(</span><span class="n">count</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"C++Nuts"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kr">thread</span> <span class="n">t1</span><span class="p">(</span><span class="n">run</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
    <span class="n">t1</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"main() after"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Instead of joining directly, we should do it like this-</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kr">thread</span> <span class="n">t1</span><span class="p">(</span><span class="n">run</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">t1</span><span class="p">.</span><span class="n">joinable</span><span class="p">()){</span>
        <span class="n">t1</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"main() after"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now if we wish to detach a thread from it’s parent thread, we will call the <code class="language-plaintext highlighter-rouge">detach()</code> method. This will ensure the main thread does not wait for the thread to finish execution. Once a thread is detached, it will run freely on its own; the <code class="language-plaintext highlighter-rouge">std::thread</code> object ceases to have any association with the thread of execution and becomes non-joinable. It’s the programmer’s responsibility to ensure that the detached thread does not access any data that may go out of scope or become invalid during its execution. It is also the programmer’s responsibility to ensure that the detached thread completes its work before the main program exits, or to implement some mechanism to ensure that the program does not exit prematurely, causing a crash.</p> <p>Here is an example of how to use <code class="language-plaintext highlighter-rouge">detach()</code>:</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;thread&gt;</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">worker</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Do some work...</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Worker thread is executing."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t</span><span class="p">(</span><span class="n">worker</span><span class="p">);</span>

    <span class="c1">// Detach the thread and continue with main thread</span>
    <span class="n">t</span><span class="p">.</span><span class="n">detach</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">joinable</span><span class="p">())</span> <span class="p">{</span>
        <span class="c1">// This won't be executed as the thread is detached and therefore not joinable</span>
        <span class="n">t</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// The main program continues independently of the worker thread</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Main thread continues its execution."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

    <span class="c1">// The main thread should ensure that it outlives the worker thread</span>
    <span class="c1">// or implements a mechanism to keep the application running until</span>
    <span class="c1">// worker thread(s) complete their execution.</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>In this example, the main thread continues executing after detaching the worker thread. It is important to note that after detaching, you can’t predict when the worker thread will execute. It might run concurrently with the main thread or afterwards, depending on the system’s scheduling.</p> <p>Important: Either join() or detach() should be called on thread object, otherwise during thread object’s destructor it will terminate the program. Because inside destructor it checks if thread is still joinable? if yes then it terminates the program.</p> <h1 id="mutex-race-conditiion-and-critical-section">Mutex, Race Conditiion and Critical Section</h1> <p>Race condition is a situation where two or more threads/process happen to change a common data at the same time. If there is a race condition then we have to protect it and the protected section is called critical section/region. Mutex is short for mutual exclusion and is used to avoid race condition. We use lock(), unlock() on mutex to avoid race condition.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;mutex&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;thread&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">amount</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

<span class="n">std</span><span class="o">::</span><span class="n">mutex</span> <span class="n">m</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">addAmount</span><span class="p">(){</span>
    <span class="n">m</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
    <span class="n">amount</span><span class="o">++</span><span class="p">;</span><span class="c1">//Critical Section</span>
    <span class="n">m</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t1</span><span class="p">(</span><span class="n">addAmount</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t2</span><span class="p">(</span><span class="n">addAmount</span><span class="p">);</span>
    <span class="n">t1</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="n">t2</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h1 id="types-of-mutex-and-locks">Types of Mutex and Locks</h1> <p>In C++, there are different types of mutexes and locks to cater to various needs and scenarios:</p> <ol> <li><strong>std::mutex</strong>: The most basic mutex type. It provides exclusive, non-recursive ownership.</li> <li><strong>std::recursive_mutex</strong>: Allows the same thread to acquire the mutex multiple times.</li> <li><strong>std::timed_mutex</strong>: Extends std::mutex, allowing for time-based locking.</li> <li><strong>std::recursive_timed_mutex</strong>: Combines features of recursive_mutex and timed_mutex.</li> </ol> <p>Locks are used in conjunction with mutexes to manage locking and unlocking in a more exception-safe manner:</p> <ul> <li><strong>std::lock_guard</strong>: Automatically locks the mutex when it’s created and unlocks it when destroyed.</li> <li><strong>std::unique_lock</strong>: More flexible than lock_guard. Can lock and unlock mutexes multiple times.</li> <li><strong>std::scoped_lock (since C++17)</strong>: Automatically locks and unlocks multiple mutexes without deadlock.</li> </ul> <h1 id="condition-variables">Condition Variables</h1> <p>Condition variables are synchronization primitives used to block a thread or multiple threads until a particular condition is met. They require a mutex to lock the shared data and a predicate that defines the condition to wait for.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;thread&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;mutex&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;condition_variable&gt;</span><span class="cp">
</span>
<span class="n">std</span><span class="o">::</span><span class="n">mutex</span> <span class="n">mtx</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">condition_variable</span> <span class="n">cv</span><span class="p">;</span>
<span class="kt">bool</span> <span class="n">ready</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">print_id</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock</span><span class="p">(</span><span class="n">mtx</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">ready</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cv</span><span class="p">.</span><span class="n">wait</span><span class="p">(</span><span class="n">lock</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread "</span> <span class="o">&lt;&lt;</span> <span class="n">id</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">go</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock</span><span class="p">(</span><span class="n">mtx</span><span class="p">);</span>
    <span class="n">ready</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="n">cv</span><span class="p">.</span><span class="n">notify_all</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">threads</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="n">threads</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">(</span><span class="n">print_id</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"10 threads ready to race...</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">go</span><span class="p">();</span>

    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="n">th</span> <span class="o">:</span> <span class="n">threads</span><span class="p">)</span> <span class="n">th</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h1 id="thread-synchronization-and-producer-consumer-problem">Thread Synchronization and Producer-Consumer Problem</h1> <p>Thread synchronization is crucial in multi-threaded applications to ensure that only one thread accesses a critical section of code at a time. This is achieved using mutexes, locks, and condition variables as described above.</p> <p>The producer-consumer problem is a classic example of a multi-process synchronization problem. The problem describes two processes, the producer and the consumer, who share a common, fixed-size buffer as a queue. The producer’s job is to generate data, put it into the buffer, and start again. At the same time, the consumer is consuming the data (i.e., removing it from the buffer), one piece at a time.</p> <p>Here’s a simple implementation using C++:</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;thread&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;mutex&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;condition_variable&gt;</span><span class="cp">
</span>
<span class="n">std</span><span class="o">::</span><span class="n">mutex</span> <span class="n">mtx</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">condition_variable</span> <span class="n">cv</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">products</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">producer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock</span><span class="p">(</span><span class="n">mtx</span><span class="p">);</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Producer "</span> <span class="o">&lt;&lt;</span> <span class="n">id</span> <span class="o">&lt;&lt;</span> <span class="s">" produced "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="n">products</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
        <span class="n">cv</span><span class="p">.</span><span class="n">notify_one</span><span class="p">();</span> <span class="c1">// Notify consumer</span>
        <span class="n">lock</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">consumer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock</span><span class="p">(</span><span class="n">mtx</span><span class="p">);</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">products</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
            <span class="n">cv</span><span class="p">.</span><span class="n">wait</span><span class="p">(</span><span class="n">lock</span><span class="p">);</span> <span class="c1">// Wait for a product</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">product</span> <span class="o">=</span> <span class="n">products</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
        <span class="n">products</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Consumer "</span> <span class="o">&lt;&lt;</span> <span class="n">id</span> <span class="o">&lt;&lt;</span> <span class="s">" consumed "</span> <span class="o">&lt;&lt;</span> <span class="n">product</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="n">lock</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">prod1</span><span class="p">(</span><span class="n">producer</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">cons1</span><span class="p">(</span><span class="n">consumer</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">cons2</span><span class="p">(</span><span class="n">consumer</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>

    <span class="n">prod1</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="n">cons1</span><span class="p">.</span><span class="n">detach</span><span class="p">();</span>
    <span class="n">cons2</span><span class="p">.</span><span class="n">detach</span><span class="p">();</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>This example showcases the basic principle of the producer-consumer problem, where synchronization tools like mutexes and condition variables are used to ensure safe and efficient data sharing between threads.</p>]]></content><author><name></name></author><category term="tech"/><category term="finance"/><category term="code"/><summary type="html"><![CDATA[Revise threading in depth]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://ananyapam7.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://ananyapam7.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://ananyapam7.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>